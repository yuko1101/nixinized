diff --git a/crates/nu-command/src/debug/ast_command.rs b/crates/nu-command/src/debug/ast_command.rs
new file mode 100644
index 0000000..3beed84
--- /dev/null
+++ b/crates/nu-command/src/debug/ast_command.rs
@@ -0,0 +1,270 @@
+use std::collections::HashMap;
+
+use nu_engine::command_prelude::*;
+use nu_parser::parse;
+use nu_protocol::{
+    Id, LabeledError,
+    ast::{self, Argument, Block, Expr, Expression},
+    engine::StateWorkingSet,
+    record,
+};
+
+#[derive(Clone)]
+pub struct AstCommand;
+
+impl Command for AstCommand {
+    fn name(&self) -> &str {
+        "ast command"
+    }
+
+    fn description(&self) -> &str {
+        "Print the abstract syntax tree (ast) for the last command in a pipeline string."
+    }
+
+    fn signature(&self) -> Signature {
+        Signature::build("ast command")
+            .input_output_type(Type::Nothing, Type::record())
+            .required(
+                "pipeline",
+                SyntaxShape::String,
+                "The pipeline to print the ast for.",
+            )
+            .allow_variants_without_examples(true)
+            .category(Category::Debug)
+    }
+
+    fn examples(&'_ self) -> Vec<Example<'_>> {
+        vec![]
+    }
+
+    fn run(
+        &self,
+        engine_state: &EngineState,
+        stack: &mut Stack,
+        call: &Call,
+        _input: PipelineData,
+    ) -> Result<PipelineData, ShellError> {
+        let pipeline: Spanned<String> = call.req(engine_state, stack, 0)?;
+
+        let mut working_set = StateWorkingSet::new(engine_state);
+        let placeholder = "%placeholder%";
+        let test_parsed_block = parse(
+            &mut working_set,
+            None,
+            format!("{}{}", pipeline.item, placeholder).as_bytes(),
+            false,
+        );
+        let parsed_block = parse(&mut working_set, None, pipeline.item.as_bytes(), false);
+        let error_output = working_set.parse_errors.first();
+
+        let mut depth_counter = usize::MAX;
+        let test_target_call =
+            find_target_call(&test_parsed_block, &working_set, &mut depth_counter);
+        let need_test = test_target_call.is_none_or(|call| {
+            call.arguments.last().is_some_and(|arg| {
+                let Argument::Positional(expr) = arg else {
+                    return false;
+                };
+
+                let Expr::String(str) = &expr.expr else {
+                    return false;
+                };
+
+                str == placeholder
+            })
+        });
+        let mut depth_counter = usize::MAX - if need_test { depth_counter } else { 0 };
+        let target_call = find_target_call(&parsed_block, &working_set, &mut depth_counter)
+            .ok_or_else(|| {
+                ShellError::LabeledError(Box::new(
+                    LabeledError::new("No command call found in the pipeline")
+                        .with_label("Expected a command", pipeline.span),
+                ))
+            })?;
+
+        let command_name = engine_state
+            .get_decl(target_call.decl_id)
+            .name()
+            .to_string();
+
+        let mut positional_args = Vec::new();
+        let mut named_args = HashMap::new();
+
+        for arg in &target_call.arguments {
+            match arg {
+                Argument::Positional(expr) => {
+                    positional_args.push(expr);
+                }
+                Argument::Named((name, _, expr)) => {
+                    named_args.insert(name.item.clone(), expr);
+                }
+                Argument::Unknown(expr) => {
+                    positional_args.push(expr);
+                }
+                Argument::Spread(expr) => {
+                    positional_args.push(expr);
+                }
+            }
+        }
+
+        let positional_args: Vec<Value> = positional_args
+            .into_iter()
+            .map(|e| Value::record(parse_expr(&working_set, e, pipeline.span), pipeline.span))
+            .collect();
+
+        let named_args: Record = named_args
+            .into_iter()
+            .map(|(k, v)| {
+                let Some(v) = v else {
+                    return (k, Value::nothing(pipeline.span));
+                };
+                let record = parse_expr(&working_set, v, pipeline.span);
+                (k, Value::record(record, pipeline.span))
+            })
+            .fold(Record::new(), |mut acc, (k, v)| {
+                acc.insert(k, v);
+                acc
+            });
+
+        let parsed = record! {
+            "command" => Value::string(command_name, call.head),
+            "args" => Value::record(record! {
+                "positional" => Value::list(
+                    positional_args,
+                    pipeline.span,
+                ),
+                "named" => Value::record(named_args, pipeline.span),
+            }, pipeline.span),
+            "errors" => match error_output {
+                Some(err) => Value::string(err.to_string(), call.head),
+                None => Value::nothing(call.head),
+            },
+        };
+
+        Ok(PipelineData::Value(Value::record(parsed, call.head), None))
+    }
+}
+
+fn find_target_call<'a>(
+    parsed_block: &'a Block,
+    working_set: &'a StateWorkingSet,
+    depth_counter: &mut usize,
+) -> Option<&'a Box<ast::Call>> {
+    if *depth_counter == 0 {
+        return None;
+    }
+    *depth_counter -= 1;
+    parsed_block
+        .pipelines
+        .last()
+        .and_then(|p| p.elements.last())
+        .and_then(|e| {
+            if let Expr::Call(call) = &e.expr.expr {
+                // Search for a sub-expression that is a call
+                let sub_call = call.arguments.iter().last().and_then(|arg: &Argument| {
+                    let expr = match arg {
+                        Argument::Positional(expr)
+                        | Argument::Named((_, _, Some(expr)))
+                        | Argument::Unknown(expr)
+                        | Argument::Spread(expr) => expr,
+                        _ => {
+                            return None;
+                        }
+                    };
+
+                    let Some(sub_expr) = find_sub_expression(&expr.expr, working_set) else {
+                        return None;
+                    };
+
+                    let sub_expr_block = working_set.get_block(sub_expr.clone());
+                    return find_target_call(sub_expr_block, working_set, depth_counter);
+                });
+
+                sub_call.or(Some(call))
+            } else {
+                None
+            }
+        })
+}
+
+fn find_sub_expression<'a>(
+    expr: &'a Expr,
+    working_set: &'a StateWorkingSet,
+) -> Option<&'a Id<nu_protocol::marker::Block>> {
+    match expr {
+        Expr::Subexpression(sub_expr) => Some(sub_expr),
+        Expr::FullCellPath(expr) => find_sub_expression(&expr.head.expr, working_set),
+        Expr::StringInterpolation(expr_vec) => expr_vec
+            .iter()
+            .last()
+            .and_then(|e| find_sub_expression(&e.expr, working_set)),
+        _ => None,
+    }
+}
+
+fn parse_expr(working_set: &StateWorkingSet, expr: &Expression, span: Span) -> Record {
+    match expr.expr {
+        Expr::RawString(ref raw_string) => record! {
+            "value" => Value::string(raw_string, span),
+            "type" => Value::string("raw_string", span),
+            "kind" => Value::string("string", span),
+        },
+        Expr::String(ref string) => record! {
+            "value" => Value::string(string, span),
+            "type" => Value::string("string", span),
+            "kind" => Value::string("string", span),
+        },
+        Expr::Int(int) => record! {
+            "value" => Value::int(int, span),
+            "type" => Value::string("int", span),
+            "kind" => Value::string("number", span),
+        },
+        Expr::Float(float) => record! {
+            "value" => Value::float(float, span),
+            "type" => Value::string("float", span),
+            "kind" => Value::string("number", span),
+        },
+        Expr::Directory(ref path, quoted) => record! {
+            "value" => Value::record(
+                record! {
+                    "path" => Value::string(path, span),
+                    "quoted" => Value::bool(quoted, span),
+                },
+                span,
+            ),
+            "type" => Value::string("directory", span),
+            "kind" => Value::string("path", span),
+        },
+        Expr::Filepath(ref path, quoted) => record! {
+            "value" => Value::record(
+                record! {
+                    "path" => Value::string(path, span),
+                    "quoted" => Value::bool(quoted, span),
+                },
+                span,
+            ),
+            "type" => Value::string("filepath", span),
+            "kind" => Value::string("path", span),
+        },
+        // TODO: support more types of expressions (e.g. glob patterns, cell path, and variables)
+        _ => {
+            let contents = working_set.get_span_contents(expr.span);
+            let str = String::from_utf8_lossy(contents).to_string();
+            record! {
+                "value" => Value::string(str, span),
+                "type" => Value::string("expression", span),
+                "kind" => Value::string("unknown", span),
+            }
+        }
+    }
+}
+
+#[cfg(test)]
+mod test {
+    #[test]
+    fn test_examples() {
+        use super::AstCommand;
+        use crate::test_examples;
+        test_examples(AstCommand {})
+    }
+}
diff --git a/crates/nu-command/src/debug/mod.rs b/crates/nu-command/src/debug/mod.rs
index be68c8c..2432a4d 100644
--- a/crates/nu-command/src/debug/mod.rs
+++ b/crates/nu-command/src/debug/mod.rs
@@ -1,4 +1,5 @@
 mod ast;
+mod ast_command;
 mod debug_;
 mod env;
 mod experimental_options;
@@ -20,6 +21,7 @@ mod view_source;
 mod view_span;
 
 pub use ast::Ast;
+pub use ast_command::AstCommand;
 pub use debug_::Debug;
 pub use env::DebugEnv;
 pub use experimental_options::DebugExperimentalOptions;
diff --git a/crates/nu-command/src/default_context.rs b/crates/nu-command/src/default_context.rs
index 4d7ed8c..8b432ea 100644
--- a/crates/nu-command/src/default_context.rs
+++ b/crates/nu-command/src/default_context.rs
@@ -151,6 +151,7 @@ pub fn add_shell_command_context(mut engine_state: EngineState) -> EngineState {
         // Debug
         bind_command! {
             Ast,
+            AstCommand,
             Debug,
             DebugEnv,
             DebugExperimentalOptions,
